3 ІНЖЕНЕРНІ РІШЕННЯ
3.1 Використані технології 

Технології, використані для розробки серверної частини, були обрані з урахуванням функціональних вимог проекту. Для написання серверної частини був обраний фреймворк Spring Boot на мові програмування Java. Spring Boot надає зручний і швидкий спосіб створення веб-додатків. Для взаємодії з базою даних використовується СУБД PostgresSQL, яка забезпечує надійне зберігання даних та підтримує транзакції. Основний функціонал системи реалізований з використанням Spring Boot, що дозволяє легко і швидко розробляти та підтримувати серверну частину. Окрім цього, спілкування між сервером та клієнтською частиною, а також із мобільним додатком, реалізоване за допомогою HTTP запитів, що забезпечує загальну структуру взаємодії системи. 

Більш детальна інформація про взаємодію серверної частини з іншими елементами системи представлена на UML-діаграмі розгортання (див. рис. 3.1)

Для ілюстрації взаємодії усіх компонентів між собою, ми створили UML-діаграму діяльності (див. рис. 3.2). За допомогою Smart Device власник мережі може спостерігати в реальному часі за тим, що відбувається у салоні через камери відеоспостереження підключенні до додатку. Крім того працівники можуть налаштовувати рівень освітлення та регулювати вологість повітря у приміщенні через мобайл додаток.  

Система має стандартну структуру проекту Spring Boot з 5 мікросервісів, які складаються з наступних компонентів:
а) Каталог auth-service:
1) Каталог сonfig, для файлів конфігурацій;
2) Каталог controllers, який зберігає контролери;
3) Каталог entity, який зберігає сутності;
4) Каталог repository, для репозиторіїв;
5) Каталог service, для зберігання сервісів;
6) Каталог dto, для зберігання об’єктів;
7) Файл AuthServiceApplication.java для запуску сервісу
б) Каталог gateway:
1) Каталог сonfig, для файлів конфігурацій;
2) Каталог filter, який зберігає фільтри системи;
3) Каталог util, який зберігає додаткові класи;
4) Файл GatewayApplication.java для запуску сервісу
5) Файл keystore.p12, для зберігання усіх ключів для HTTPS
в) Каталог orderMS:
1) Каталог impl, для зберігання реалізації сервісів;
2) Файл Order.java, модель замовлення.
3) Файл OrderController.java, для зберігання методів;
4) Файл OrderRepository.java, для використання репозиторію;
5) Файл OrderService.java, для зберігання сервісних методів;
6) Файл SaloonModel.java, для відправки запитів на інші сервіси;
7) Файл UserModel.java, для відправки запитів на інші сервісі;
8) Файл OrderServiceApplication.java для запуску сервісу
г) Каталог saloonMS:
1) Каталог impl, для зберігання реалізації сервісів;
2) Файл Saloon.java, модель салону.
3) Файл SaloonController.java, для зберігання методів;
4) Файл SaloonRepository.java, для використання репозиторію;
5) Файл SaloonService.java, для зберігання сервісних методів;
6) Файл SaloonServiceApplication.java для запуску сервісу
д) Каталог userMS:
1) Каталог impl, для зберігання реалізації сервісів;
2) Файл UserCredential.java, модель користувача.
3) Файл UserController.java, для зберігання методів;
4) Файл UserRepository.java, для використання репозиторію;
5) Файл UserService.java, для зберігання сервісних методів;
6) Файл UserServiceApplication.java для запуску сервісу

Також, для цього була створена UML діаграма пакетів (див. рис. Б.1). 

3.3 Специфікація HTTP запитів.

Нижче в таблиці 1 наведемо специфікацію HTTP запитів усіх методів.

3.4 Реалізація методів обробки даних.

Серед методів обробки даних можна виділити методи вирахування фінансової статистики усієї мережі салонів, які приймають ідентифікатор та строку, яка визначає проміжок часу за який вираховується статистика. До цих методів входить метод, який вираховує суму заробітних плат працівників салонів власника (див. розділ А.1 у додатку А) та метод, який вираховує та повертає прибуток мережі салонів за проміжок часу (див. розділ А.2 у додатку А). У разі винятка, методи ловлять його та виводять помилку.


